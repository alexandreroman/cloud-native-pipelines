resource_types:
- name: slack-alert
  type: docker-image
  source:
    repository: arbourd/concourse-slack-alert-resource

resources:
- name: source-code
  type: git
  icon: github-circle
  source:
    uri: ((git-uri))
    branch: ((git-branch))
    username: ((git-username))
    password: ((git-password))
- name: notify
  type: slack-alert
  icon: slack
  source:
    url: ((slack-webhook))

jobs:
- name: run-unit-tests
  plan:
  - get: source-code
    trigger: true
  - task: compile-and-test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: adoptopenjdk
          tag: ((app-java-version))-jdk-hotspot
      inputs:
      - name: source-code
      caches:
      - path: source-code/maven
      run:
        path: /bin/bash
        args:
        - -c
        - |
          cd source-code
          if [[ -d $PWD/maven && ! -d $HOME/.m2 ]]; then
            ln -s "$PWD/maven" "$HOME/.m2"
          fi
          ./mvnw package
    on_success:
      put: notify
      params:
        channel: ((slack-channel))
        alert_type: success
        message: "Unit tests passed: ((app))"
    on_failure:
      put: notify
      params:
        channel: ((slack-channel))
        alert_type: failed
        message: "Unit tests error: ((app))"
- name: update-deployment-manifest
  plan:
  - get: source-code
    trigger: true
    passed: [run-unit-tests]
  - task: update-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alexandreroman/pb-cli
          tag: ((build-cli-version))
      inputs:
      - name: source-code
      run:
        path: /bin/bash
        args:
        - -c
        - |
          cat > image.yml << EOF
          team: ((build-team))
          source:
            git:
              url: ((git-uri))
              revision: $(cat source-code/.git/ref)
          build:
            env:
            - name: BP_JAVA_VERSION
              value: ((app-java-version)).*
          image:
            tag: ((build-image))
          EOF
          cat image.yml
          export BUILD_SERVICE_USERNAME=((build-username))
          export BUILD_SERVICE_PASSWORD=((build-password))
          pb api set ((build-target)) --skip-ssl-validation
          pb login
          pb image apply -f image.yml
    on_success:
      put: notify
      params:
        channel: ((slack-channel))
        alert_type: success
        message: "New build started: ((app))"
    on_failure:
      put: notify
      params:
        channel: ((slack-channel))
        alert_type: failed
        message: "Failed to start new build: ((app))"
